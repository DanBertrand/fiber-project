{"version":3,"sources":["Components/Box.jsx","Components/Floor.jsx","Components/FloorShadow.jsx","Project1.jsx","Components/Header.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Box","args","position","mesh","useRef","ref","castShadow","attach","color","Floor","rotation","Math","PI","opacity","FloorShadow","receiveShadow","Project1","softShadows","shadows","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","OrbitControls","autoRotate","autoRotateSpeed","Header","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAYeA,EAVH,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACbC,EAAOC,mBACb,OACE,uBAAMC,IAAKF,EAAMD,SAAUA,EAAUI,YAAU,EAA/C,UACE,mCAAmBC,OAAO,WAAWN,KAAMA,IAC3C,sCAAsBM,OAAO,WAAWC,MAAM,YCKrCC,EAVD,SAAC,GAAwB,IAAtBR,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACfC,EAAOC,mBACb,OACE,uBAAMC,IAAKF,EAAMO,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAIV,SAAUA,EAA3D,UACE,qCAAqBK,OAAO,WAAWN,KAAMA,IAC7C,sCAAsBM,OAAO,WAAWC,MAAM,WAAWK,QAAS,SCUzDC,EAfK,SAAC,GAAwB,IAAtBb,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrBC,EAAOC,mBACb,OACE,uBACEC,IAAKF,EACLO,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAC5BV,SAAUA,EACVa,eAAa,EAJf,UAME,qCAAqBR,OAAO,WAAWN,KAAMA,IAC7C,gCAAgBM,OAAO,WAAWM,QAAS,S,gBCwBlCG,MA9Bf,WAGE,OAFAC,cAGE,mCACE,eAAC,IAAD,CAAQC,SAAS,EAAMC,OAAQ,CAAEjB,SAAU,CAAC,EAAG,EAAG,IAAKkB,IAAK,IAA5D,UACE,8BAAcC,UAAW,IACzB,kCACEf,YAAU,EACVJ,SAAU,CAAC,EAAG,GAAI,GAClBmB,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,kCACE,cAAC,EAAD,CAAK3B,KAAM,CAAC,EAAG,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,KACvC,cAAC,EAAD,CAAaD,KAAM,CAAC,GAAI,GAAI,IAAKC,SAAU,CAAC,GAAI,EAAG,KACnD,cAAC,EAAD,CAAOD,KAAM,CAAC,GAAI,GAAI,IAAKC,SAAU,CAAC,GAAI,KAAM,QAElD,cAAC2B,EAAA,EAAD,CAAeC,YAAU,EAACC,gBAAiB,UCfpCC,G,MAbA,WACb,OACE,mCACE,qBAAKC,UAAU,OAAf,SACE,uDAEF,qBAAKA,UAAU,UAAf,SACE,2DCKOC,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c099837.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nconst Box = ({ args, position }) => {\n  const mesh = useRef();\n  return (\n    <mesh ref={mesh} position={position} castShadow>\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      <meshStandardMaterial attach=\"material\" color=\"red\" />\n    </mesh>\n  );\n};\n\nexport default Box;\n","import { useRef } from \"react\";\n\nconst Floor = ({ args, position }) => {\n  const mesh = useRef();\n  return (\n    <mesh ref={mesh} rotation={[-Math.PI / 2, 0, 0]} position={position}>\n      <planeBufferGeometry attach=\"geometry\" args={args} />\n      <meshStandardMaterial attach=\"material\" color=\"darkgrey\" opacity={0.5} />\n    </mesh>\n  );\n};\n\nexport default Floor;\n","import { useRef } from \"react\";\n\nconst FloorShadow = ({ args, position }) => {\n  const mesh = useRef();\n  return (\n    <mesh\n      ref={mesh}\n      rotation={[-Math.PI / 2, 0, 0]}\n      position={position}\n      receiveShadow\n    >\n      <planeBufferGeometry attach=\"geometry\" args={args} />\n      <shadowMaterial attach=\"material\" opacity={0.7} />\n    </mesh>\n  );\n};\n\nexport default FloorShadow;\n","import { Canvas } from \"@react-three/fiber\";\nimport Box from \"./Components/Box\";\nimport Floor from \"./Components/Floor\";\nimport FloorShadow from \"./Components/FloorShadow\";\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\n\nfunction Project1() {\n  softShadows();\n\n  return (\n    <>\n      <Canvas shadows={true} camera={{ position: [0, 1, 10], fov: 45 }}>\n        <ambientLight intensity={1} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <group>\n          <Box args={[1, 1, 1]} position={[0, 2, 0]} />\n          <FloorShadow args={[10, 10, 10]} position={[0, -1, 0]} />\n          <Floor args={[10, 10, 10]} position={[0, -1.02, 0]} />\n        </group>\n        <OrbitControls autoRotate autoRotateSpeed={6} />\n      </Canvas>\n    </>\n  );\n}\n\nexport default Project1;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"logo\">\n        <span>REACT THREE FIBER</span>\n      </div>\n      <div className=\"episode\">\n        <span>Dan - Project. 1</span>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import { Suspense } from \"react\";\nimport Project1 from \"./Project1\";\nimport \"./App.scss\";\nimport Header from \"./Components/Header\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Project1 />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}